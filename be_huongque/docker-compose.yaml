services:
  postgres:
    image: postgres:latest
    container_name: database
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: adminuser
      POSTGRES_PASSWORD: adminpassword
      POSTGRES_DB: main_db
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - esdata:/usr/share/elasticsearch/data
  eurekaserver:
    build:
      context: ./eurekaserver
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    environment:
      EUREKA_HOSTNAME: eurekaserver
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8761/eureka/apps/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
  rabbitmq:
    image: rabbitmq:latest
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: adminhuongque
      RABBITMQ_DEFAULT_PASS: huongque
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
  apigateway:
    build:
      context: ./apigateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      rabbitmq:
        condition: service_started
      eurekaserver:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: adminhuongque
      RABBITMQ_PASSWORD: huongque
      RABBITMQ_QUEUE: file.upload
      EUREKA_SERVER_HOST: eurekaserver
  authservice:
    build:
      context: ./authservice
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: authservice
      DB_PASSWORD: auth
      DB_NAME: authdb
      JWT_SIGNING_KEY: ${JWT_SIGNING_KEY}
      FRONTEND_URL: ${FRONTEND_URL}
      PORT: 8081
    volumes:
    - ./authservice:/app
    depends_on:
      - postgres
      - rabbitmq
      - eurekaserver
  userservice:
    build:
      context: ./userservice
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      - postgres
      - rabbitmq
      - eurekaserver
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: userservice
      DB_PASSWORD: user
      DB_NAME: userdb
      PORT: 8083
  tenantservice:
    build:
      context: ./tenantservice
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      - postgres
      - rabbitmq
      - eurekaserver
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: tenantservice
      DB_PASSWORD: tenant
      DB_NAME: tenantdb
      PORT: 8084
      EUREKA_HOST: eurekaserver
      EUREKA_PORT: 8761
      HOSTNAME: tenantservice
    volumes:
      - ./tenantservice:/src
      - /src/node_modules
  productservice:
    build:
      context: ./productservice
      dockerfile: Dockerfile  
    container_name: productservice
    restart: on-failure
    ports:
      - "8085:8085"
    depends_on:
      - postgres
      - rabbitmq
      - eurekaserver
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: productservice
      DB_PASSWORD: product
      DB_NAME: productdb
      PORT: 8085
      EUREKA_SERVER_HOST: eurekaserver
      EUREKA_PORT: 8761
      HOSTNAME: productservice
  registerservice:
    build:
      context: ./registerservice
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "8086:8086"
    depends_on:
      - postgres
      - rabbitmq
      - eurekaserver
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: registerservice
      DB_PASSWORD: register
      DB_NAME: registerdb
      PORT: 8086
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: adminhuongque
      RABBITMQ_PASSWORD: huongque
      RABBITMQ_QUEUE: file.upload
      RABBITMQ_QUEUE_RESPONSE: file.upload.response
      EUREKA_HOST: eurekaserver
      EUREKA_PORT: 8761
      HOSTNAME: registerservice
  logsservice:
    build:
      context: ./logsservice
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      - postgres
      - rabbitmq
      - eurekaserver
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: logsservice
      DB_PASSWORD: logs
      DB_NAME: logsdb
      PORT: 8082
  s3bucket:
    build:
      context: ./s3bucket
      dockerfile: Dockerfile
    ports:
      - "8087:8087"
    depends_on:
      - postgres
      - rabbitmq
      - eurekaserver
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: adminhuongque
      RABBITMQ_PASSWORD: huongque
      RABBITMQ_QUEUE: file.upload
      RABBITMQ_QUEUE_RESPONSE: file.upload.response
      API_KEY: ${API_KEY}
      ENDPOINT: ${ENDPOINT}
  
  checkoutservice:
    build:
      context: ./checkoutservice
      dockerfile: Dockerfile
    ports:
      - "8088:8088"
    depends_on:
      - postgres
      - rabbitmq
      - eurekaserver
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: paymentservice
      DB_PASSWORD: payment
      DB_NAME: paymentdb
      PORT: 8088
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: adminhuongque
      RABBITMQ_PASSWORD: huongque
      RABBITMQ_QUEUE: file.upload

  orderservice:
    build:
      context: ./orderservice
      dockerfile: Dockerfile
    ports:
      - "8089:8089"
    depends_on:
      - postgres
      - rabbitmq
      - eurekaserver
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: orderservice
      DB_PASSWORD: order
      DB_NAME: orderdb
      PORT: 8089
networks:
  default:
    driver: bridge

volumes:
  pgdata:
  rabbitmq-data:
  esdata: