services:
  postgres:
    image: postgres:17
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: adminuser
      POSTGRES_PASSWORD: adminpassword
      POSTGRES_DB: main_db
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d
  elasticsearch:
    image: elasticsearch:9.0.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - esdata:/usr/share/elasticsearch/data
  eurekaserver:
    build:
      context: ./eurekaserver
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    environment:
      EUREKA_HOSTNAME: eurekaserver
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "--quiet",
          "http://localhost:8761/eureka/apps/",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
  rabbitmq:
    image: rabbitmq:latest
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: adminhuongque
      RABBITMQ_DEFAULT_PASS: huongque
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
  apigateway:
    build:
      context: ./apigateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      eurekaserver:
        condition: service_healthy
    environment:
      JWT_SIGNING_KEY: ${JWT_SIGNING_KEY}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: adminhuongque
      RABBITMQ_PASSWORD: huongque
      RABBITMQ_QUEUE: file.upload
      EUREKA_SERVER_HOST: eurekaserver
    volumes:
      - ./apigateway:/app
  authservice:
    build:
      context: ./authservice
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - postgres
      - eurekaserver
      - apigateway
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: authservice
      DB_PASSWORD: auth
      DB_NAME: authdb
      JWT_SIGNING_KEY: ${JWT_SIGNING_KEY}
      FRONTEND_URL: ${FRONTEND_URL}
      RESEND_KEY: ${RESEND_KEY}
      PORT: 8081
    volumes:
      - ./authservice:/app
  userservice:
    build:
      context: ./userservice
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      - postgres
      - rabbitmq
      - eurekaserver
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: userservice
      DB_PASSWORD: user
      DB_NAME: userdb
      PORT: 8083
      EUREKA_HOST: eurekaserver
      EUREKA_PORT: 8761
    volumes:
      - ./userservice:/app
  tenantservice:
    build:
      context: ./tenantservice
      dockerfile: Dockerfile.dev
    ports:
      - "8084:8084"
    depends_on:
      - postgres
      - rabbitmq
      - eurekaserver
      - elasticsearch
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: tenantservice
      DB_PASSWORD: tenant
      DB_NAME: tenantdb
      PORT: 8084
      EUREKA_HOST: eurekaserver
      EUREKA_PORT: 8761
      HOSTNAME: tenantservice
    volumes:
      - ./tenantservice:/app
      - /app/node_modules
  productservice:
    build:
      context: ./productservice
      dockerfile: Dockerfile #
    container_name: productservice
    restart: on-failure
    ports:
      - "8085:8085"
      - "35729:35729"
    depends_on:
      - postgres
      - rabbitmq
      - eurekaserver
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: productservice
      DB_PASSWORD: product
      DB_NAME: productdb
      PORT: 8085
      EUREKA_SERVER_HOST: eurekaserver
      EUREKA_PORT: 8761
      HOSTNAME: productservice
    volumes:
      - ./productservice:/app
  registerservice:
    build:
      context: ./registerservice
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "8086:8086"
    depends_on:
      - postgres
      - rabbitmq
      - eurekaserver
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: registerservice
      DB_PASSWORD: register
      DB_NAME: registerdb
      PORT: 8086
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: adminhuongque
      RABBITMQ_PASSWORD: huongque
      RABBITMQ_QUEUE: file.upload
      RABBITMQ_QUEUE_RESPONSE: file.upload.response
      EUREKA_HOST: eurekaserver
      EUREKA_PORT: 8761
      HOSTNAME: registerservice
    volumes:
      - ./registerservice:/app
      - /app/node_modules
  # logsservice:
  #   build:
  #     context: ./logsservice
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8082:8082"
  #   depends_on:
  #     - postgres
  #     - rabbitmq
  #     - eurekaserver
  #   environment:
  #     DB_HOST: postgres
  #     DB_PORT: 5432
  #     DB_USERNAME: logsservice
  #     DB_PASSWORD: logs
  #     DB_NAME: logsdb
  #     PORT: 8082
  #   volumes:
  #     - ./logsservice:/app
  s3bucket:
    build:
      context: ./s3bucket
      dockerfile: Dockerfile
    ports:
      - "8087:8087"
    depends_on:
      - postgres
      - rabbitmq
      - eurekaserver
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: adminhuongque
      RABBITMQ_PASSWORD: huongque
      RABBITMQ_QUEUE: file.upload
      RABBITMQ_QUEUE_RESPONSE: file.upload.response
      API_KEY: ${API_KEY}
      ENDPOINT: ${ENDPOINT}
    volumes:
      - ./s3bucket:/app

  checkoutservice:
    build:
      context: ./checkoutservice
      dockerfile: Dockerfile.dev
    ports:
      - "8088:8088"
    depends_on:
      - postgres
      - rabbitmq
      - eurekaserver
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: paymentservice
      DB_PASSWORD: payment
      DB_NAME: paymentdb
      PORT: 8088
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: adminhuongque
      RABBITMQ_PASSWORD: huongque
      RABBITMQ_QUEUE: file.upload
      EUREKA_HOST: eurekaserver
      EUREKA_PORT: 8761
      STRIPE_KEY: ${STRIPE_KEY}
    volumes:
      - ./checkoutservice:/app
  orderservice:
    build:
      context: ./orderservice
      dockerfile: Dockerfile.dev
    ports:
      - "8089:8089"
    depends_on:
      - postgres
      - rabbitmq
      - eurekaserver
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: orderservice
      DB_PASSWORD: order
      DB_NAME: orderdb
      PORT: 8089
      EUREKA_HOST: eurekaserver
      EUREKA_PORT: 8761
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: adminhuongque
      RABBITMQ_PASSWORD: huongque
      RABBITMQ_QUEUE: file.upload
    volumes:
      - ./orderservice:/app

  # searchservice:
  #   build:
  #     context: ./searchservice
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8091:8091"
  #   depends_on:
  #     - postgres
  #     - rabbitmq
  #     - elasticsearch
  #     - eurekaserver
  #   environment:
  #     - PORT=8091
  #     - ELASTICSEARCH_HOST=elasticsearch
  #     - ELASTICSEARCH_PORT=9200
  #     - EUREKA_HOST=eurekaserver
  #     - EUREKA_PORT=8761
  #     - JAVA_OPTS=--add-opens java.base/java.util=ALL-UNNAMED

  # chatbotservice:
  #   build:
  #     context: ./chatbotservice
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8090:8090"
  #   depends_on:
  #     - postgres
  #     - rabbitmq
  #     - eurekaserver
  #   environment:
  #     DB_HOST: postgres
  #     DB_PORT: 5432
  #     DB_USERNAME: chatbotservice
  #     DB_PASSWORD: chatbot
  #     DB_NAME: chatbotdb
  #     PORT: 8090
  #     RABBITMQ_HOST: rabbitmq
  #     RABBITMQ_PORT: 5672
  #     RABBITMQ_USERNAME: adminhuongque
  #     RABBITMQ_PASSWORD: huongque
  #     EUREKA_HOST: eurekaserver
  #     EUREKA_PORT: 8761
  #   volumes:
  #     - ./chatbotservice:/app

  notiservice:
    build:
      context: ./notiservice
      dockerfile: Dockerfile
    ports:
      - "8092:8092"
    depends_on:
      - postgres
      - rabbitmq
      - eurekaserver
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: notificationservice
      DB_PASSWORD: notification
      DB_NAME: notificationdb
      PORT: 8092
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: adminhuongque
      RABBITMQ_PASSWORD: huongque
      EUREKA_HOST: eurekaserver
      EUREKA_PORT: 8761
    volumes:
      - ./notiservice:/app
networks:
  default:
    driver: bridge

volumes:
  pgdata:
  rabbitmq-data:
  esdata:
